//
// Generated file, do not edit! Created by opp_msgc 4.5 from networklayer/routing/carRouting/carRouting.msg.
//

#ifndef _CARROUTING_M_H_
#define _CARROUTING_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0405
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API 
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API 
#  endif
#endif

// cplusplus {{
#include "IPvXAddress.h"
#include "Coord.h"  
#include "simtime_t.h"
#include <vector>
#include "anchor.h"

// }}



/**
 * Class generated from <tt>networklayer/routing/carRouting/carRouting.msg</tt> by opp_msgc.
 * <pre>
 * packet carBeacon {
 *     IPvXAddress address;
 *     Coord speed;
 *     Coord position;
 * }
 * </pre>
 */
class INET_API carBeacon : public ::cPacket
{
  protected:
    IPvXAddress address_var;
    Coord speed_var;
    Coord position_var;

  private:
    void copy(const carBeacon& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const carBeacon&);

  public:
    carBeacon(const char *name=NULL, int kind=0);
    carBeacon(const carBeacon& other);
    virtual ~carBeacon();
    carBeacon& operator=(const carBeacon& other);
    virtual carBeacon *dup() const {return new carBeacon(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual IPvXAddress& getAddress();
    virtual const IPvXAddress& getAddress() const {return const_cast<carBeacon*>(this)->getAddress();}
    virtual void setAddress(const IPvXAddress& address);
    virtual Coord& getSpeed();
    virtual const Coord& getSpeed() const {return const_cast<carBeacon*>(this)->getSpeed();}
    virtual void setSpeed(const Coord& speed);
    virtual Coord& getPosition();
    virtual const Coord& getPosition() const {return const_cast<carBeacon*>(this)->getPosition();}
    virtual void setPosition(const Coord& position);
};

inline void doPacking(cCommBuffer *b, carBeacon& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, carBeacon& obj) {obj.parsimUnpack(b);}




/**
 * Class generated from <tt>networklayer/routing/carRouting/carRouting.msg</tt> by opp_msgc.
 * <pre>
 * packet PGB {
 *     IPvXAddress originatorAddress;
 *     IPvXAddress destAddress;
 *     Coord previousForwarderSpeed;
 *     Coord previousForwarderPosition;
 *     unsigned int pgbCounter;
 *     simtime_t travelTime;
 *     unsigned int numOfHops;
 *     unsigned int averageNumOfNeighbors;
 *     unsigned int minimumNumOfNeighbors;
 *     Coord originatorPosition;
 *     Coord originatorSpeed;
 *     unsigned int seqNum;
 *     unsigned int aSetOfAnchorPoints;
 * }
 * </pre>
 */
class INET_API PGB : public ::cPacket
{
  protected:
    IPvXAddress originatorAddress_var;
    IPvXAddress destAddress_var;
    Coord previousForwarderSpeed_var;
    Coord previousForwarderPosition_var;
    unsigned int pgbCounter_var;
    simtime_t travelTime_var;
    unsigned int numOfHops_var;
    std::string  previousForwarderHostName;
    unsigned int averageNumOfNeighbors_var;
    unsigned int minimumNumOfNeighbors_var;
    Coord originatorPosition_var;
    Coord originatorSpeed_var;
    unsigned int seqNum_var;
    std::vector<anchor> aSetOfAnchorPoints_var;
    double previousForwarderAngel;
  private:
    void copy(const PGB& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PGB&);

  public:
    PGB(const char *name=NULL, int kind=0);
    PGB(const PGB& other);
    virtual ~PGB();
    PGB& operator=(const PGB& other);
    virtual PGB *dup() const {return new PGB(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual IPvXAddress& getOriginatorAddress();
    virtual const IPvXAddress& getOriginatorAddress() const {return const_cast<PGB*>(this)->getOriginatorAddress();}
    virtual void setOriginatorAddress(const IPvXAddress& originatorAddress);
    virtual IPvXAddress& getDestAddress();
    virtual const IPvXAddress& getDestAddress() const {return const_cast<PGB*>(this)->getDestAddress();}
    virtual void setDestAddress(const IPvXAddress& destAddress);
    virtual Coord& getPreviousForwarderSpeed();
    virtual const Coord& getPreviousForwarderSpeed() const {return const_cast<PGB*>(this)->getPreviousForwarderSpeed();}
    virtual void setPreviousForwarderSpeed(const Coord& previousForwarderSpeed);
    virtual Coord& getPreviousForwarderPosition();
    virtual const Coord& getPreviousForwarderPosition() const {return const_cast<PGB*>(this)->getPreviousForwarderPosition();}
    virtual void setPreviousForwarderPosition(const Coord& previousForwarderPosition);
    virtual unsigned int getPgbCounter() const;
    virtual void setPgbCounter(unsigned int pgbCounter);
    virtual simtime_t getTravelTime() const;
    virtual void setTravelTime(simtime_t travelTime);
    virtual unsigned int getNumOfHops() const;
    virtual void setNumOfHops(unsigned int numOfHops);
    virtual unsigned int getAverageNumOfNeighbors() const;
    virtual void setAverageNumOfNeighbors(unsigned int averageNumOfNeighbors);
    virtual unsigned int getMinimumNumOfNeighbors() const;
    virtual void setMinimumNumOfNeighbors(unsigned int minimumNumOfNeighbors);
    virtual Coord& getOriginatorPosition();
    virtual const Coord& getOriginatorPosition() const {return const_cast<PGB*>(this)->getOriginatorPosition();}
    virtual void setOriginatorPosition(const Coord& originatorPosition);
    virtual Coord& getOriginatorSpeed();
    virtual const Coord& getOriginatorSpeed() const {return const_cast<PGB*>(this)->getOriginatorSpeed();}
    virtual void setOriginatorSpeed(const Coord& originatorSpeed);
    virtual unsigned int getSeqNum() const;
    virtual void setSeqNum(unsigned int seqNum);
    virtual std::vector<anchor> getASetOfAnchorPoints() const;
    virtual void setASetOfAnchorPoints(std::vector<anchor> aSetOfAnchorPoints);
    virtual std::string& getPreviousForwarderHostName();
    virtual void setPreviousForwarderHostName(std::string previousForwarderHostName);
    virtual double& getPreviousForwarderAngel();
    virtual void setPreviousForwarderAngel(double previousForwarderAngel);
};

inline void doPacking(cCommBuffer *b, PGB& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, PGB& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>networklayer/routing/carRouting/carRouting.msg</tt> by opp_msgc.
 * <pre>
 * packet AGF {
 *     IPvXAddress originatorAddress;
 *     IPvXAddress destAddress;    
 *     simtime_t travelTime;
 *     unsigned int numOfHops;
 *     unsigned int averageNumOfNeighbors;
 *     unsigned int minimumNumOfNeighbors;
 *     Coord destPosition;
 *     Coord destSpeed;
 *     unsigned int aSetOfAnchorPoints;
 *     unsigned int copyOfASetOfAnchorPoints;
 * }
 * </pre>
 */
class INET_API AGF : public ::cPacket
{
  protected:
    IPvXAddress originatorAddress_var;
    IPvXAddress destAddress_var;
    simtime_t travelTime_var;
    unsigned int numOfHops_var;
    unsigned int averageNumOfNeighbors_var;
    unsigned int minimumNumOfNeighbors_var;
    Coord destPosition_var;
    Coord destSpeed_var;
    std::vector<anchor> aSetOfAnchorPoints_var;

  private:
    void copy(const AGF& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AGF&);

  public:
    AGF(const char *name=NULL, int kind=0);
    AGF(const AGF& other);
    virtual ~AGF();
    AGF& operator=(const AGF& other);
    virtual AGF *dup() const {return new AGF(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);
    std::vector<anchor> copyOfASetOfAnchorPoints_var;

    // field getter/setter methods
    virtual IPvXAddress& getOriginatorAddress();
    virtual const IPvXAddress& getOriginatorAddress() const {return const_cast<AGF*>(this)->getOriginatorAddress();}
    virtual void setOriginatorAddress(const IPvXAddress& originatorAddress);
    virtual IPvXAddress& getDestAddress();
    virtual const IPvXAddress& getDestAddress() const {return const_cast<AGF*>(this)->getDestAddress();}
    virtual void setDestAddress(const IPvXAddress& destAddress);
    virtual simtime_t getTravelTime() const;
    virtual void setTravelTime(simtime_t travelTime);
    virtual unsigned int getNumOfHops() const;
    virtual void setNumOfHops(unsigned int numOfHops);
    virtual unsigned int getAverageNumOfNeighbors() const;
    virtual void setAverageNumOfNeighbors(unsigned int averageNumOfNeighbors);
    virtual unsigned int getMinimumNumOfNeighbors() const;
    virtual void setMinimumNumOfNeighbors(unsigned int minimumNumOfNeighbors);
    virtual Coord& getDestPosition();
    virtual const Coord& getDestPosition() const {return const_cast<AGF*>(this)->getDestPosition();}
    virtual void setDestPosition(const Coord& destPosition);
    virtual Coord& getDestSpeed();
    virtual const Coord& getDestSpeed() const {return const_cast<AGF*>(this)->getDestSpeed();}
    virtual void setDestSpeed(const Coord& destSpeed);
    virtual std::vector<anchor> getASetOfAnchorPoints() const;
    virtual void setASetOfAnchorPoints(std::vector<anchor> aSetOfAnchorPoints);
    virtual void makeACopy();
    virtual std::vector<anchor> getCopyOfASetOfAnchorPoints() ;
    virtual void setCopyOfASetOfAnchorPoints(std::vector<anchor> copyOfASetOfAnchorPoints);
};

inline void doPacking(cCommBuffer *b, AGF& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, AGF& obj) {obj.parsimUnpack(b);}


class INET_API carPacket : public ::cPacket
{
  protected:
    Coord destinationPosition_var;
    IPvXAddress originatorAddress_var;
    IPvXAddress destinationAddress_var;
    std::vector<anchor> aSetOfAnchorPoints_var;

  private:
    void copy(const carPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const carPacket&);

  public:
    carPacket(const char *name=NULL, int kind=0);
    carPacket(const carPacket& other);
    virtual ~carPacket();
    carPacket& operator=(const carPacket& other);
    virtual carPacket *dup() const {return new carPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);
    std::vector<anchor> copyOfASetOfAnchorPoints_var;

    // field getter/setter methods
    virtual Coord& getDestinationPosition();
    virtual const Coord& getDestinationPosition() const {return const_cast<carPacket*>(this)->getDestinationPosition();}
    virtual void setDestinationPosition(const Coord& destinationPosition);
    virtual IPvXAddress& getOriginatorAddress();
    virtual const IPvXAddress& getOriginatorAddress() const {return const_cast<carPacket*>(this)->getOriginatorAddress();}
    virtual void setOriginatorAddress(const IPvXAddress& originatorAddress);
    virtual IPvXAddress& getDestinationAddress();
    virtual const IPvXAddress& getDestinationAddress() const {return const_cast<carPacket*>(this)->getDestinationAddress();}
    virtual void setDestinationAddress(const IPvXAddress& destinationAddress);
    virtual std::vector<anchor> getASetOfAnchorPoints() ;
    virtual void setASetOfAnchorPoints(std::vector<anchor>& aSetOfAnchorPoints);
    virtual void PopUpAnchorPoints();
    virtual std::vector<anchor> getCopyOfASetOfAnchorPoints() ;
    virtual void setCopyOfASetOfAnchorPoints(std::vector<anchor>& copyOfASetOfAnchorPoints);
    virtual void makeACopy();

};

inline void doPacking(cCommBuffer *b, carPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, carPacket& obj) {obj.parsimUnpack(b);}
/**
 * Class generated from <tt>networklayer/routing/carRouting/carRouting.msg</tt> by opp_msgc.
 * <pre>
 * packet stGuard {
 *     IPvXAddress activatorAddress;
 *     unsigned int stGuardCounter;
 *     unsigned int stGuardTTL;
 *     Coord guardedPosition;
 *     double guardedRadius;
 * }
 * </pre>
 */
class INET_API stGuard : public ::cPacket
{
  protected:
    IPvXAddress activatorAddress_var;
    unsigned int stGuardCounter_var;
    unsigned int stGuardTTL_var;
    Coord guardedPosition_var;
    double guardedRadius_var;

  private:
    void copy(const stGuard& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const stGuard&);

  public:
    stGuard(const char *name=NULL, int kind=0);
    stGuard(const stGuard& other);
    virtual ~stGuard();
    stGuard& operator=(const stGuard& other);
    virtual stGuard *dup() const {return new stGuard(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual IPvXAddress& getActivatorAddress();
    virtual const IPvXAddress& getActivatorAddress() const {return const_cast<stGuard*>(this)->getActivatorAddress();}
    virtual void setActivatorAddress(const IPvXAddress& activatorAddress);
    virtual unsigned int getStGuardCounter() const;
    virtual void setStGuardCounter(unsigned int stGuardCounter);
    virtual unsigned int getStGuardTTL() const;
    virtual void setStGuardTTL(unsigned int stGuardTTL);
    virtual Coord& getGuardedPosition();
    virtual const Coord& getGuardedPosition() const {return const_cast<stGuard*>(this)->getGuardedPosition();}
    virtual void setGuardedPosition(const Coord& guardedPosition);
    virtual double getGuardedRadius() const;
    virtual void setGuardedRadius(double guardedRadius);
};

inline void doPacking(cCommBuffer *b, stGuard& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, stGuard& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>networklayer/routing/carRouting/carRouting.msg</tt> by opp_msgc.
 * <pre>
 * packet trGuard {
 *     IPvXAddress activatorAddress;
 *     unsigned int trGuardCounter;
 *     unsigned int trGuardTTL;
 *     Coord guardedPosition;
 *     double guardedRadius;
 *     Coord activatorSpeed;
 * }
 * </pre>
 */
class INET_API trGuard : public ::cPacket
{
  protected:
    IPvXAddress activatorAddress_var;
    unsigned int trGuardCounter_var;
    unsigned int trGuardTTL_var;
    Coord guardedPosition_var;
    double guardedRadius_var;
    Coord activatorSpeed_var;

  private:
    void copy(const trGuard& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const trGuard&);

  public:
    trGuard(const char *name=NULL, int kind=0);
    trGuard(const trGuard& other);
    virtual ~trGuard();
    trGuard& operator=(const trGuard& other);
    virtual trGuard *dup() const {return new trGuard(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual IPvXAddress& getActivatorAddress();
    virtual const IPvXAddress& getActivatorAddress() const {return const_cast<trGuard*>(this)->getActivatorAddress();}
    virtual void setActivatorAddress(const IPvXAddress& activatorAddress);
    virtual unsigned int getTrGuardCounter() const;
    virtual void setTrGuardCounter(unsigned int trGuardCounter);
    virtual unsigned int getTrGuardTTL() const;
    virtual void setTrGuardTTL(unsigned int trGuardTTL);
    virtual Coord& getGuardedPosition();
    virtual const Coord& getGuardedPosition() const {return const_cast<trGuard*>(this)->getGuardedPosition();}
    virtual void setGuardedPosition(const Coord& guardedPosition);
    virtual double getGuardedRadius() const;
    virtual void setGuardedRadius(double guardedRadius);
    virtual Coord& getActivatorSpeed();
    virtual const Coord& getActivatorSpeed() const {return const_cast<trGuard*>(this)->getActivatorSpeed();}
    virtual void setActivatorSpeed(const Coord& activatorSpeed);
};

inline void doPacking(cCommBuffer *b, trGuard& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, trGuard& obj) {obj.parsimUnpack(b);}


#endif // _CARROUTING_M_H_
